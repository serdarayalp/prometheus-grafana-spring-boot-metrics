<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>prometheus-grafana-spring-boot-metrics</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>jar</packaging>

    <properties>
        <java.version>21</java.version>
        <spring-boot.version>3.5.6</spring-boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!--
        Spring Boot Actuator ist ein offizielles Spring-Boot-Modul, das vorgefertigte Endpunkte bereitstellt,
        um deine Anwendung zu überwachen, zu analysieren und zu verwalten. Also im Prinzip: Ein Diagnosetool und
        Monitoring-Schnittstelle für Spring-Apps.

        Sobald man die Abhängigkeit hinzufügt, stellt Spring Boot automatisch verschiedene HTTP-Endpunkte zur
        Verfügung (meist unter /actuator/...).

        # Actuator-Endpunkte
        # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ## /actuator/health	Zeigt, ob deine Anwendung ?gesund? ist (z. B. DB erreichbar, Disk ok)
        ## /actuator/info	Gibt App-Infos zurück (Version, Build-Zeit, ?)
        ## /actuator/prometheus	Spezielles Format für Prometheus-Monitoring
        ## /actuator/metrics	Zeigt verfügbare Metriken (CPU, Memory, Requests, etc.)
        ## /actuator/env	Umgebungsvariablen und Konfigurationen
        ## /actuator/beans	Liste aller Spring-Beans in der Anwendung

        Prometheus spricht ein bestimmtes Textformat (die Prometheus exposition format).
        Der Actuator kann genau das über den Endpoint

        /actuator/prometheus

        bereitstellen. Diesen Endpoint ruft Prometheus regelmäßig ab, um Metriken zu scrapen.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!--
        Micrometer ist eine Metrik-Abstraktionsbibliothek für Java.

        * Sie bietet eine einheitliche API, um Metriken zu erzeugen, egal, wo sie später landen.
        * Man muss nicht direkt Prometheus-spezifischen Code schreiben.
        * Micrometer kann Metriken an verschiedene "Backends" senden: z.B. Prometheus, Graphite, InfluxDB, Datadog usw.

        "micrometer-registry-prometheus" ist ein Micrometer-Modul, das:
        * Prometheus-kompatible Metriken erzeugt
        * Sie automatisch im Prometheus Exposition Format bereitstellt
        * Spring Boot Actuator kann den Endpoint /actuator/prometheus nutzen

        Ohne Micrometer müsste man manuell Strings im Prometheus-Format bauen, was fehleranfällig ist.
        -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>1.15.5</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>3.1.6</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
